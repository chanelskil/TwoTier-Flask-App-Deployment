---
- name: app servers
  hosts: client-apps
  become: yes
  vars: 
    jenkinspath: /var/lib/jenkins/workspace
    apppath: /var/www
    appname: TwoTierApp_FlaskPy
    ansible_python_interpreter: "/usr/bin/python3"
    mysql_root_username: 'root'
    mysql_root_password: ''  # Use Ansible vault to encrypt this
    mysql_user: 'nelson'
    mysql_user_password: 'nelson123'  # Use Ansible vault to encrypt this
    mysql_host: 'localhost'  # '%' allows connection from any host; specify IP or hostname for restricted access
    mysql_db: messages


  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install needed packages for Flask
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
        - python3-venv
        - pkg-config
        - build-essential
        - libmysqlclient-dev
        - python3-dev
        - mysql-server

    - name: Clone the Flask app repository
      git:
        repo: 'https://github.com/chanelskil/TwoTier-Flask-App-Deployment.git'
        dest: "{{ apppath }}/{{ appname }}"
        version: master

    - name: Create a Python virtual environment
      shell: python3 -m venv "{{ apppath }}/{{ appname }}/venv"
      args:
        creates: "{{ apppath }}/{{ appname }}/venv/bin/activate"

    - name: Install Python dependencies
      pip:
        requirements: "{{ apppath }}/{{ appname }}/requirements.txt"
        virtualenv: "{{ apppath }}/{{ appname }}/venv"

    - name: Verify the installation of dependencies
      shell: |
        . "{{ apppath }}/{{ appname }}/venv/bin/activate"
        pip check
      register: pip_check_output

    - name: Display pip check result
      debug:
        msg: "{{ pip_check_output.stdout }}"

    - name: List installed packages in the virtual environment
      shell: "{{ apppath }}/{{ appname }}/venv/bin/pip list"
      register: pip_list

    - name: Display installed packages
      debug:
        msg: "{{ pip_list.stdout }}"

    - name: Check MySQL service status
      systemd:
        name: mysql
        state: started
      register: mysql_status
   
    - name: Ensure MySQL is running
      systemd:
        name: mysql
        state: started
        enabled: yes  # Ensures the service starts on boot
      when: mysql_status.status.ActiveState != "active"
    
    - name: Report MySQL status
      debug:
        msg: "MySQL service is running and enabled."
      when: mysql_status.changed == false

    - name: Create MySQL user
      community.mysql.mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        host: "{{ mysql_host }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_unix_socket: /run/mysqld/mysqld.sock
      vars:
        ansible_python_interpreter: "{{ apppath }}/{{ appname }}/venv/bin/python"

    - name: Create MySQL database
      community.mysql.mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_user_password }}"
        login_host: "{{ mysql_host }}"
      vars:
        ansible_python_interpreter: "{{ apppath }}/{{ appname }}/venv/bin/python"

    - name: Ensure the messages table exists
      ansible.builtin.mysql_query:
        login_db: "{{ mysql_db }}"
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_user_password }}"
        query: |
          CREATE TABLE IF NOT EXISTS messages (
            id INT AUTO_INCREMENT PRIMARY KEY,
            message TEXT
          );
      vars:
        ansible_python_interpreter: "{{ apppath }}/{{ appname }}/venv/bin/python"

    - name: Connect to mysql db
      community.mysql.mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      vars:
        ansible_python_interpreter: "{{ apppath }}/{{ appname }}/venv/bin/python"

    - name: Insert data into the table
      ansible.builtin.mysql_query:
        login_db: "{{ mysql_db }}"
        login_user: "{{mysql_user}}"
        login_password: "{{ mysql_user_password }}"
        query: |
          INSERT INTO messages (message) VALUES ( 'This is a sample message');
      vars:
        ansible_python_interpreter: "{{ apppath }}/{{ appname }}/venv/bin/python"

    - name: Set environment variables for Flask app
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: "{{ item.key }}={{ item.value }}"
        create: yes

      loop:
        - { key: "FLASKAPP_MYSQL_HOST", value: "{{mysql_host}}" }
        - { key: "FLASKAPP_MYSQL_USER", value: "{{mysql_user}}" }
        - { key: "FLASKAPP_MYSQL_PASSWORD", value: "{{mysql_password}}" }
        - { key: "FLASKAPP_MYSQL_DB", value: "{{mysql_db}}" }
      no_log: false  # Ensures sensitive information isn't logged

    - name: Start the Flask app using gunicorn
      shell: |
        . "{{ apppath }}/{{ appname }}/venv/bin/activate"
        gunicorn --workers 3 --bind 0.0.0.0:5000 "{{ appname }}:app"
      args:
        chdir: "{{ apppath }}/{{ appname }}"

